-- 学生表
CREATE TABLE student(
	stuid VARCHAR(10)PRIMARY KEY,
	stuname VARCHAR(50)
);

-- 分数表
CREATE TABLE score(
	stuid VARCHAR(10),
	score INT,
	courseid INT,
	CONSTRAINT fk_stu_sco  FOREIGN KEY(stuid) REFERENCES student(stuid)
);

DROP TABLE score;

SELECT * FROM student;
INSERT INTO student VALUES('1001','张三峰');
INSERT INTO student VALUES('1002','张无忌');
INSERT INTO student VALUES('1003','王尼玛');
INSERT INTO student VALUES('1004','王老五');

SELECT * FROM score;
INSERT INTO score VALUES('1001',98,1);
INSERT INTO score VALUES('1002',95,1);
INSERT INTO score VALUES('1002',67,2);
INSERT INTO score VALUES('1003',83,2);
INSERT INTO score VALUES('1003',57,3);

-- 多表查询 笛卡尔积
SELECT * FROM student,score WHERE student.stuid=score.stuid;
SELECT s.stuid,s.stuname,c.score FROM student s,score c WHERE s.stuid=c.stuid; -- FROM student s,score c 取别名

-- 内连接查询
SELECT s.stuid,s.stuname,c.score FROM student s JOIN score c ON s.stuid=c.stuid;
SELECT s.stuid,s.stuname,c.score FROM student s,score c WHERE s.stuid=c.stuid;-- 此句等同于上一句

SELECT s.stuid,s.stuname,c.score FROM student s JOIN score c ON s.stuid=c.stuid WHERE score>60;-- 多表查询，多条件
SELECT s.stuid,s.stuname,c.score FROM student s,score c WHERE s.stuid=c.stuid and score>70;-- 此句等同于上一句

-- 外连接查询
-- 左外连接，只要左边有的都出来
select s.stuid,s.stuname,c.score from student s left join score c on s.stuid=c.stuid;
select s.stuid,s.stuname,c.score from score c left join student s on s.stuid=c.stuid;
-- 右外连接，只要右边有的都出来
select s.stuid,s.stuname,c.score from student s right join score c on s.stuid=c.stuid;
select s.stuid,s.stuname,c.score from score c right join student s on s.stuid=c.stuid;

-- 多张表查询
-- 加个科目表，让score表形成关系，变成多对多
CREATE TABLE course(
		courseid int primary key,
		cname varchar(50)
);
insert into course values(1,'java'),(2,'html'),(3,'javaScript');

select s.stuid,s.stuname,c.score,c.courseid,cc.cname from student s,score c,course cc where s.stuid=c.stuid and c.courseid=cc.courseid;
-- join on，多表拼接，一级一级条件往后推
select s.stuid,s.stuname,c.score,c.courseid,cc.cname from student s 
join score c on s.stuid=c.stuid
join course cc on c.courseid=cc.courseid;